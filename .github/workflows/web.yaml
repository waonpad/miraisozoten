# This is a basic workflow to help you get started with Actions

name: web-ci

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
    paths:
      - 'apps/web/**'
  pull_request:
    branches: [main]
    paths:
      - 'apps/web/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # t3-envがCI環境でも動くため、ダミーでエラーを回避する
  VITE_APP_ENV: production
  VITE_API_URL: http://localhost:3000
  VITE_APP_NAME: 'VITE APP'
  VITE_HOST_URL: http://localhost:8080
  VITE_SENTRY_ENABLED: false
  VITE_SENTRY_DSN: 'http://localhost:3000/dummy-url'
  VITE_FIREBASE_API_KEY: dummy
  VITE_FIREBASE_AUTH_DOMAIN: dummy
  VITE_FIREBASE_PROJECT_ID: dummy
  VITE_FIREBASE_APP_ID: dummy

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache node modules
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn global add turbo
      - run: npx nps prepare.ci.web
      - run: npx nps build.ci.web
      - run: npx nps test.ci.web
